<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>inicio on Diseñando una experiencia ... enseñando.</title>
    <link>/tags/inicio/</link>
    <description>Recent content in inicio on Diseñando una experiencia ... enseñando.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/inicio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Porque estudiar la dispersion?</title>
      <link>/2019/07/20/porque-estudiar-la-dispersion/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/20/porque-estudiar-la-dispersion/</guid>
      <description>Porque estudiar la dispersion?Los estadigrafos de dispersion, como su nombre lo indica, miden la dispersion de los datos de la muestra, dos conjuntos de datos pueden tener la misma localizacion central, y no obstante ser muy diferentes, si uno esta mas disperso que el otro.
Es decir, una dispersion pequeña nos indica que los datos se encuentran acumulados cercanamente alrededor de la media aritmetica, si esto es asi, la media es un valor muy representativo de todos los datos, se consideraria un promedio confiable.</description>
    </item>
    
    <item>
      <title>Generacion de Sucesiones y Vectores</title>
      <link>/2018/02/28/generacion-de-sucesiones-y-vectores/</link>
      <pubDate>Wed, 28 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/28/generacion-de-sucesiones-y-vectores/</guid>
      <description>Generacion de SucesionesEn R existen varias funciones para generar sucesiones numericas, por ejemplo: 1:30 es el vector c(1,2, ...,29,30). el operador “dos puntos” tiene maxima prioridad en una expresion, asi por ejemplo: 2*1:15 es el vector c(2,4,6, ...,28,30). Escribimos n &amp;lt;- 10 y comparamos las sucesiones 1:n-1 y 1:(n-1)
n &amp;lt;- 101:n-1## [1] 0 1 2 3 4 5 6 7 8 91:(n-1)## [1] 1 2 3 4 5 6 7 8 9La forma 30:1 permite construir una sucesion descendente</description>
    </item>
    
    <item>
      <title>Funciones Basicas en R</title>
      <link>/2018/02/22/funciones-basicas-en-r/</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/22/funciones-basicas-en-r/</guid>
      <description>ObjetivoConocer algunas funciones y operaciones básicas en R.
Para obtener ayuda sobre una función específica en R ejecutamos help(nombre de la funcion) help(mean), esto no carga despliega la ayuda en la pestaña help en Rstudio.
#Si necesitamos un recordatorio de los argumentos de cualquier funcion usamos la funcion argsargs(mean)## function (x, ...) ## NULLTambien tenemos disponible la funcion example(nombre de la funcion), nos devuelve un ejemplo del uso de la funcion que le indiquemos</description>
    </item>
    
    <item>
      <title>Como conocí a R</title>
      <link>/2018/02/06/como-conoc%C3%AD-a-r/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/06/como-conoc%C3%AD-a-r/</guid>
      <description>Amor a primera vistaLos cursos de fundamentos o de introducción de programación impartidos en colegios o universidades se han sustentado sobre un seudocódigo (Joyanes Aguilar 2002), este último permite utilizar una serie de instrucciones que representan sencillos procesos a ser ejecutados en forma secuencial, luego este seudocódigo ser llevado al lenguaje de programación de elegido por el estudiante, luego nos hacen conocer cómo trabajan las funciones, los while, los if, etc.</description>
    </item>
    
  </channel>
</rss>